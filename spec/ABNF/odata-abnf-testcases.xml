<?xml version="1.0" encoding="UTF-8"?>
<TestSuite MaxUncoveredRules="80" xmlns="http://docs.oasis-open.org/odata/ns/testcases">
  <DisableTrace Rule="odataIdentifier"/>
  <DisableTrace Rule="identifierLeadingCharacter"/>
  <DisableTrace Rule="identifierCharacter"/>
  <DisableTrace Rule="ALPHA"/>
  <DisableTrace Rule="DIGIT"/>
  
  <Constraint Rule="entityNavigationProperty">
    <Match>Category</Match>
    <Match>Product</Match>
    <Match>Supplier</Match>
  </Constraint>
  <Constraint Rule="entityColNavigationProperty">
    <Match>Items</Match>
    <Match>Products</Match>
  </Constraint>
  <Constraint Rule="complexProperty">
    <Match>Address</Match>
  </Constraint>
  <Constraint Rule="complexColProperty">
    <Match>Addresses</Match>
  </Constraint>
  <Constraint Rule="primitiveColProperty">
    <Match>Sizes</Match>
  </Constraint>
  <Constraint Rule="primitiveKeyProperty">
    <Match>ID</Match>
    <Match>Size</Match>
  </Constraint>
  <Constraint Rule="primitiveNonKeyProperty">
    <Match>Name</Match>
    <Match>Rating</Match>
    <Match>Street</Match>
    <Match>Price</Match>
    <Match>CompanyName</Match>
    <Match>BirthDate</Match>
    <Match>LifeTime</Match>
  </Constraint>
  <Constraint Rule="streamProperty">
    <Match>Thumbnail</Match>
  </Constraint>
  <Constraint Rule="entitySetName">
    <Match>Categories</Match>
    <Match>Customers</Match>
    <Match>LeaveRequests</Match>
    <Match>Products</Match>
    <Match>Suppliers</Match>
  </Constraint>
  <Constraint Rule="entityColFunction">
    <Match>ProductsByColor</Match>
    <Match>ProductsByCategoryId</Match>
  </Constraint>
  <Constraint Rule="primitiveColProperty">
    <Match>EmailAddresses</Match>
  </Constraint>
  <Constraint Rule="complexColProperty">
    <Match>Addresses</Match>
  </Constraint>
  <Constraint Rule="namespacePart">
    <Match>Namespace</Match>
    <Match>Model</Match>
  </Constraint>
    
  <TestCase Name="URI with IPv4 address, path and trailing slash"
            Rule="odataURI">
    <Input>http://127.0.0.1:8080/MyService/</Input>
  </TestCase>
  <TestCase Name="URI with IPv6 address, path and trailing slash"
            Rule="odataURI">
    <Input>https://[2001:db8:85a3:8d3:1319:8a2e:370:7348]:8080/MyService/</Input>
  </TestCase>
  <TestCase Name="URI with IPvFuture address, path and trailing slash"
            Rule="odataURI">
    <Input>https://[v7.0]/MyService/</Input>
  </TestCase>
  <TestCase Name="URI without schema separator" 
            Rule="odataURI" 
            FailAt="4">
    <Input>http//My.Org/</Input>
  </TestCase>
  <TestCase Name="Binary with X" 
            Rule="binary">
    <Input>X'1a2B3c4D'</Input>
  </TestCase>
  <TestCase Name="Binary with binary" 
            Rule="binary">
    <Input>binary'1a2B3c4D'</Input>
  </TestCase>
  <TestCase Name="Binary with odd number of hex digits" 
            Rule="binary" 
            FailAt="5">
    <Input>X'123'</Input>
  </TestCase>
  <TestCase Name="DateTime: no seconds" 
            Rule="dateTimeBody">
    <Input>2012-09-03T13:52</Input>
  </TestCase>
  <TestCase Name="DateTime: seconds" 
            Rule="dateTimeBody">
    <Input>2012-09-03T08:09:02</Input>
  </TestCase>
  <TestCase Name="DateTime: subseconds" 
            Rule="dateTimeBody">
    <Input>2012-08-31T18:19:22.1</Input>
  </TestCase>
  <TestCase Name="DateTime: earliest possible" 
            Rule="dateTimeBody">
    <Input>1753-01-01T00:00:00.000000000000</Input>
  </TestCase>
  <TestCase Name="DateTime: Midnight this day" 
            Rule="dateTimeBody">
    <Input>2011-12-31T24:00</Input>
  </TestCase>
  <TestCase Name="DateTime: Midnight this day with seconds" 
            Rule="dateTimeBody">
    <Input>2011-12-31T24:00:00</Input>
  </TestCase>
  <TestCase Name="DateTime: Midnight this day" 
            Rule="dateTimeBody"
            FailAt="12">
    <Input>2011-12-31T24:01</Input>
  </TestCase>
  <TestCase Name="DateTime: Midnight this day" 
            Rule="dateTimeBody"
            FailAt="16">
    <Input>2011-12-31T24:00:01</Input>
  </TestCase>
  <TestCase Name="DateTime in URL" 
            Rule="dateTime">
    <Input>datetime'2012-09-03T14:27:34.1'</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset in URL: CEST" 
            Rule="dateTimeOffsetBody">
    <Input>2012-09-03T14:53+02:00</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset in URL: UTC" 
            Rule="dateTimeOffset">
    <Input>datetimeoffset'2012-09-03T12:53Z'</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset in URL: Midnight" 
            Rule="dateTimeOffset">
    <Input>datetimeoffset'2012-09-03T24:00-03:00'</Input>
  </TestCase>
  <TestCase Name="Decimal" 
            Rule="decimalBody">
    <Input>3.14</Input>
  </TestCase>
  <TestCase Name="Decimal: integer" 
            Rule="decimalBody">
    <Input>-2</Input>
  </TestCase>
  <TestCase Name="Decimal: integer" 
            Rule="decimalBody"
            FailAt="4">
    <Input>+42.</Input>
  </TestCase>
  <TestCase Name="Decimal: no digit before decimal point" 
            Rule="decimalBody"
            FailAt="0">
    <Input>.1</Input>
  </TestCase>
  <TestCase Name="Decimal in URL" 
            Rule="decimal">
    <Input>3.14M</Input>
  </TestCase>
  <TestCase Name="Double" 
            Rule="doubleBody">
    <Input>3.14</Input>
  </TestCase>
  <TestCase Name="Double with exponent" 
            Rule="doubleBody">
    <Input>-0.314e1</Input>
  </TestCase>
  <TestCase Name="Negative infinity" 
            Rule="doubleBody">
    <Input>-INF</Input>
  </TestCase>
  <TestCase Name="Positive infinity" 
            Rule="doubleBody">
    <Input>INF</Input>
  </TestCase>
  <TestCase Name="Not a Number" 
            Rule="doubleBody">
    <Input>NaN</Input>
  </TestCase>
  <TestCase Name="Double in URL" 
            Rule="double">
    <Input>-0.314e1d</Input>
  </TestCase>
  <TestCase Name="Single in URL" 
            Rule="single">
    <Input>-0.314e1f</Input>
  </TestCase>
  <TestCase Name="Byte" 
            Rule="byte">
    <Input>255</Input>
  </TestCase>
  <TestCase Name="SByte" 
            Rule="sbyte">
    <Input>-128</Input>
  </TestCase>
  <TestCase Name="Int16" 
            Rule="int16">
    <Input>+32000</Input>
  </TestCase>
  <TestCase Name="Int32" 
            Rule="int32">
    <Input>-2000000000</Input>
  </TestCase>
  <TestCase Name="Int64" 
            Rule="int64">
    <Input>1234567890123456789</Input>
  </TestCase>
  <TestCase Name="Null: unqualified" 
            Rule="null">
    <Input>null</Input>
  </TestCase>
  <TestCase Name="Null: qualified" 
            Rule="null">
    <Input>null'double'</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity Set" 
            Rule="resourcePath">
    <Input>Categories</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(11)</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(ID=1)</Input>
  </TestCase>
  <TestCase Name="Key"
            Rule="string">
    <Input>'Hugo''s%20Tavern'</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(ID=1,Size=5)</Input>
  </TestCase>
  <TestCase Name="Correct Guid" 
            Rule="GUID">
    <Input>guid'01234567-89ab-cdef-0123-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Guid with wrong character" 
            Rule="GUID"
            FailAt="10">
    <Input>guid'01234g67-89ab-cdef-0123-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Guid with less than 32 digits" 
            Rule="GUID"
            FailAt="28">
    <Input>guid'01234567-89ab-cdef-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Time: a year and a day" 
            Rule="TIME">
    <Input>time'P1Y1D'</Input>
  </TestCase>
  <TestCase Name="Time: plus a year and a day" 
            Rule="TIME">
    <Input>time'+P1Y1D'</Input>
  </TestCase>
  <TestCase Name="Time: a month before" 
            Rule="TIME">
    <Input>time'-P1M'</Input>
  </TestCase>
  <TestCase Name="Time: twelve seconds" 
            Rule="TIME">
    <Input>time'PT12S'</Input>
  </TestCase>
  <TestCase Name="Time: two hours, ten minutes and three point one seconds" 
            Rule="TIME">
    <Input>time'PT2H10M3.1S'</Input>
  </TestCase>
  <TestCase Name="Time: not time on the clock" 
            Rule="TIME"
            FailAt="5">
    <Input>time'11:22:33'</Input>
  </TestCase>
  <TestCase Name="Identifier" 
            Rule="odataIdentifier">
    <Input>TheQuickBrownFoxSays42</Input>
  </TestCase>
  <TestCase Name="Identifier with leading underscores" 
            Rule="odataIdentifier">
    <Input>__ID</Input>
  </TestCase>
  <TestCase Name="Identifier: no starting digit" 
            Rule="odataIdentifier" 
            FailAt="0">
    <Input>0time</Input>
  </TestCase>
  <TestCase Name="Identifier: no dots within" 
            Rule="odataIdentifier" 
            FailAt="2">
    <Input>No.Dot</Input>
  </TestCase>
  <TestCase Name="Entity Set" 
            Rule="resourcePath">
    <Input>Container.EntitySet</Input>
  </TestCase>
  <TestCase Name="Call unbound action" 
            Rule="actionCall">
    <Input>Activation</Input>
  </TestCase>
  <TestCase Name="Call unbound action with container" 
            Rule="actionCall">
    <Input>Container.Activation()</Input>
  </TestCase>
  <TestCase Name="Call bound action" 
            Rule="resourcePath">
    <Input>LeaveRequests(4)/Rejection</Input>
  </TestCase>
  <TestCase Name="Call bound action" 
            Rule="resourcePath">
    <Input>LeaveRequests(4)/Container.Rejection()</Input>
  </TestCase>
  <!-- 
  	Test cases for example URLs in OData URI  
  	-->
  <TestCase Name="2 URL Components - service root URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/</Input>
  </TestCase>
  <TestCase Name="2 URL Components - metadata URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/$metadata</Input>
  </TestCase>
  <TestCase Name="2 URL Components - batch URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/$batch</Input>
  </TestCase>
  <TestCase Name="Service Root directly at server root" 
            Rule="odataUri">
    <Input>http://My.Org:80/</Input>
  </TestCase>
  <TestCase Name="2 URL Components - resource path" 
            Rule="resourcePath">
    <Input>Categories(1)/Products</Input>
  </TestCase>
  <TestCase Name="2 URL Components - query options" 
            Rule="queryOptions">
    <Input>$top=2&amp;$orderby=Name</Input>
  </TestCase>
  <TestCase Name="2 URL Components - resource path and query options" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products?$top=2&amp;$orderby=Name</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - entity set" 
            Rule="entitySetName">
    <Input>Products</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - entity set" 
            Rule="odataRelativeUri">
    <Input>Products</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - entity set with $count" 
            Rule="odataRelativeUri">
    <Input>Products/$count</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - entity set navigation with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Items/$count</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - collection property with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Addresses/$count</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - collection property with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Sizes/$count</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - function call" 
            Rule="odataRelativeUri">
    <Input>ProductsByCategoryId(categoryId=2)</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - function call with alias" 
            Rule="odataRelativeUri">
    <Input>ProductsByCategoryId(categoryId=@cat)?@cat=2</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - service operation parameter" 
            Rule="parameterNameAndValue">
    <Input>color='red'</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - service operation call" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor?color='red'</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - service operation call" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ProductsByColor?color='red'</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - single entity" 
            Rule="resourcePath">
    <Input>Categories(1)</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - bound operation on entity set" 
            Rule="resourcePath">
    <Input>Products/MostExpensive</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - follow navigation property" 
            Rule="resourcePath">
    <Input>Products(1)/Supplier</Input>
  </TestCase>
  <TestCase Name="4.1 Addressing entities - follow navigation property and call function" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products/AllOrders</Input>
  </TestCase>
  <!-- parser cannot distinguish between entityColNavigationProperty and entityNavigationProperty, so it will pick the wrong branch and never reach the keyPredicate -->
  <TestCase Name="4.1.1 Canonical URL" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products(1)</Input>
  </TestCase>
  <TestCase Name="4.2 Addressing Links between Entities" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/$links/Products</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing a Property - primitive" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ID</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing a Property - complex" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address/Street</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing a Property - stream" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Thumbnail</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing a Property - collection of primitive" 
            Rule="odataRelativeUri">
    <Input>Suppliers(1)/EmailAddresses</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing a Property - collection of complex" 
            Rule="odataRelativeUri">
    <Input>Suppliers(1)/Addresses</Input>
  </TestCase>
  <TestCase Name="4.5 Addressing a Property Value" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ID/$value</Input>
  </TestCase>
  <TestCase Name="4.5 Addressing a Property Value - complex" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address/Street/$value</Input>
  </TestCase>
  <TestCase Name="4.5x Addressing a Media Resource" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/$value</Input>
  </TestCase>
  <!-- TODO: subtype queries
  <TestCase Name="4.x Inheritance - set of subtypes" 
            Rule="odataRelativeUri">
    <Input>Customers(1)/Model.Customer</Input>
  </TestCase>
  -->
  <TestCase Name="5.1.1 Filter" 
            Rule="filter">
    <Input>$filter=true</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter: no spaces" 
            Rule="filter"
            FailAt="0">
    <Input>$filter =true</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="eqExpr">
    <Input>true eq false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Property" 
            Rule="firstBoolPrimitiveMemExpr">
    <Input>Size</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="eqExpr">
    <Input>Size eq true</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Literal" 
            Rule="literalExpr">
    <Input>4.0</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Literal" 
            Rule="literalExpr">
    <Input>'Huge'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="eqExpr">
    <Input>Size eq 4.0</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.2 Not Equals" 
            Rule="neExpr">
    <Input>true ne false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.3 Greater Than" 
            Rule="gtExpr">
    <Input>true gt false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.4 Greater Than or Equal" 
            Rule="geExpr">
    <Input>true ge false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.5 Less Than" 
            Rule="ltExpr">
    <Input>true lt false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.6 Less Than or Equal" 
            Rule="leExpr">
    <Input>true le false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.7 Logical And" 
            Rule="andExpr">
    <Input>true and false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.8 Logical Or" 
            Rule="orExpr">
    <Input>true or false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.9 Logical Negation" 
            Rule="notExpr">
    <Input>not false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="eqExpr">
    <Input>Name eq 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.1 Addition" 
            Rule="addExpr">
    <Input>Price add 2.45M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.2 Subtraction" 
            Rule="subExpr">
    <Input>Price sub 0.55M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.3 Multiplication" 
            Rule="mulExpr">
    <Input>Price mul 2</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.4 Division" 
            Rule="divExpr">
    <Input>Price div 2M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.5 Modulo" 
            Rule="modExpr">
    <Input>Price mod 5</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.5 Negate" 
            Rule="negateExpr">
    <Input>-Price</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="parenExpr">
    <Input>(true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="parenExpr">
    <Input>( true )</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="boolParenExpr">
    <Input>(false)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.1 substringof" 
            Rule="substringOfMethodCallExpr">
    <Input>substringof('Alfreds',CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.2 endswith" 
            Rule="endswithMethodCallExpr">
    <Input>endswith(CompanyName,'Futterkiste')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.3 startswith" 
            Rule="startswithMethodCallExpr">
    <Input>startswith(CompanyName,'Futterkiste')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.4 length" 
            Rule="lengthMethodCallExpr">
    <Input>length(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.5 indexof" 
            Rule="indexofMethodCallExpr">
    <Input>indexof(CompanyName,'lfreds')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.6 substring" 
            Rule="substringMethodCallExpr">
    <Input>substring(CompanyName,5)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.6 substring with length" 
            Rule="substringMethodCallExpr">
    <Input>substring(CompanyName,5,2)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.7 tolower" 
            Rule="tolowerMethodCallExpr">
    <Input>tolower(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.8 toupper" 
            Rule="toupperMethodCallExpr">
    <Input>toupper(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.9 trim" 
            Rule="trimMethodCallExpr">
    <Input>trim(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.10 concat" 
            Rule="concatMethodCallExpr">
    <Input>concat(CompanyName,Name)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.11 year" 
            Rule="yearMethodCallExpr">
    <Input>year(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.12 years" 
            Rule="yearsMethodCallExpr">
    <Input>years(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.13" 
            Rule="monthMethodCallExpr">
    <Input>month(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.14" 
            Rule="monthsMethodCallExpr">
    <Input>months(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.15" 
            Rule="dayMethodCallExpr">
    <Input>day(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.16" 
            Rule="daysMethodCallExpr">
    <Input>days(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.17" 
            Rule="hourMethodCallExpr">
    <Input>hour(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.18" 
            Rule="hoursMethodCallExpr">
    <Input>hours(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.19" 
            Rule="minuteMethodCallExpr">
    <Input>minute(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.20" 
            Rule="minutesMethodCallExpr">
    <Input>minutes(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.21" 
            Rule="secondMethodCallExpr">
    <Input>second(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.22" 
            Rule="secondsMethodCallExpr">
    <Input>seconds(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.23" 
            Rule="roundMethodCallExpr">
    <Input>round(Price)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.24" 
            Rule="floorMethodCallExpr">
    <Input>floor(Price)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.25" 
            Rule="ceilingMethodCallExpr">
    <Input>ceiling(Price)</Input>
  </TestCase>
  <!-- TODO: 5.1.1.4.26 one-parameter isof --> 
  <TestCase Name="5.1.1.4.26 isof(2)" 
            Rule="isofExpr">
    <Input>isof(Category,Model.Customer)</Input>
  </TestCase>
  <!-- TODO: 5.1.1.4.26 one-parameter cast --> 
  <TestCase Name="5.1.1.4.27 cast(2)" 
            Rule="castExpr">
    <Input>cast(Category,Model.Customer)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.27 cast(2)" 
            Rule="boolCastExpr">
    <Input>cast(Category,Edm.Boolean)</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - single navigation property" 
            Rule="expand">
    <Input>$expand=Items</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - multiple navigation properties, recursive" 
            Rule="expand">
    <Input>$expand=Items,Items/Product</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - simple" 
            Rule="select">
    <Input>$select=Rating,ReleaseDate</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with star" 
            Rule="select">
    <Input>$select=*</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with navigation" 
            Rule="select">
    <Input>$select=Category/Name</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with navigation and expand" 
            Rule="queryOptions">
    <Input>$select=Category/Name&amp;$expand=Category</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with navigation and star" 
            Rule="select">
    <Input>$select=Items/ID,Items/Product/*,Container.*</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with property of complex property" 
            Rule="select">
    <Input>$select=Address/Street</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - qualifiedEntityTypeName" 
            Rule="qualifiedEntityTypeName">
    <Input>Namespace.BestSellingProduct</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - tricky" 
            Rule="select">
    <Input>$select=Namespace.BestSellingProduct/Spokesperson,Supplier/Namespace.PreferredSupplier/AccountRepresentative</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - actions by container" 
            Rule="select">
    <Input>$select=Container.ActionName,Container2.*</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy" 
            Rule="orderby">
    <Input>$orderby=Name</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy asc" 
            Rule="orderby">
    <Input>$orderby=Name&#09;asc</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy mixed" 
            Rule="orderby">
    <Input>$orderby=Name asc,Rating,Size desc</Input>
  </TestCase>
  <TestCase Name="5.1.5 Top and Skip" 
            Rule="queryOptions">
    <Input>$top=5&amp;$skip=10</Input>
  </TestCase>
  <TestCase Name="5.1.6 Inlinecount" 
            Rule="queryOptions">
    <Input>$inlinecount=allpages</Input>
  </TestCase>
  <TestCase Name="5.1.7 Format" 
            Rule="queryOptions">
    <Input>$format=json&amp;$format=atom&amp;$format=xml&amp;$format=text/html</Input>
  </TestCase>
  <TestCase Name="5.1.7 Format - media type" 
            Rule="queryOptions">
    <Input>$format=text/html</Input>
  </TestCase>
  <TestCase Name="Next Link" 
            Rule="queryOptions">
    <Input>$skiptoken=Start@Next_Chunk:From=Here!</Input>
  </TestCase>
  <TestCase Name="Next Link: no Ampersand" 
            Rule="queryOptions"
            FailAt="15">
    <Input>$skiptoken=Here?</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>search=blue</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>!deltatoken='201208210403'</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>!special</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="queryOptions">
      <Input>$orderby=Name&amp;securitytoken=0412312321</Input>
  </TestCase>
  <!--TODO: function call with complex, colComplex, colPrimitive -->
  <!--TODO: JSON types, e.g. string literal with double quotes -->
  <!--TODO: URL-encoding: attribute PercentEncode="true" on <Input> -->
  <!--TODO: function name matches actionCall rule, not function call rule -->
  <TestCase Name="function with complex parameter - no properties" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex?complex={}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - one property" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex?complex={"Name":"Value"}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - one property" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex?complex={"__metadata":{"type":"Model.Customer"},"Name":"Value"}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - three properties" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex?complex={"Name":false,"Price":3.14e0,"Rating":null}</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - zero" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor?colors=[]</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - one" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor?colors=["red"]</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - two" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor?colors=["red","green"]</Input>
  </TestCase>
</TestSuite>