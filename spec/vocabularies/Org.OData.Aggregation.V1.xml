<?xml version="1.0" encoding="utf-8"?>
<!--

Technical Committee:
  OASIS Open Data Protocol (OData) TC
  https://www.oasis-open.org/committees/odata

Chairs:
  - Barbara Hartel (barbara.hartel@sap.com), SAP AG
  - Ram Jeyaraman (Ram.Jeyaraman@microsoft.com), Microsoft

Editors:
  - Ralf Handl (ralf.handl@sap.com), SAP AG
  - Hubert Heijkers (hubert.heijkers@nl.ibm.com), IBM
  - Gerald Krause (gerald.krause@sap.com), SAP AG
  - Michael Pizzo (mikep@microsoft.com), Microsoft
  - Martin Zurmuehl (martin.zurmuehl@sap.com), SAP AG

Additional artifacts: 
  This CSDL document is one component of a Work Product that consists of:
  - OData Extension for Data Aggregation Version 4.0
  - OData Aggregation ABNF Construction Rules Version 4.0
  - OData Aggregation ABNF Test Cases
  - OData Aggregation Vocabulary (this document)

Related work:
  This work product is related to:
  - OData Version 4.0, a multi-part Work Product which includes:
    - OData Version 4.0 Part 1: Protocol
    - OData Version 4.0 Part 2: URL Conventions
    - OData Version 4.0 Part 3: Common Schema Definition Language (CSDL)
    - OData ABNF Construction Rules Version 4.0
    - OData ABNF Test Cases
    - OData Core Vocabulary
    - OData Measures Vocabulary
    - OData Capabilities Vocabulary
  - OData JSON Format Version 4.0
  This specification replaces or supersedes:
  - None

Declared XML namespaces:
  - none

Abstract:
  This specification adds basic grouping and aggregation functionality 
  (e.g. sum, min, and max) to the Open Data Protocol (OData) without 
  changing any of the base principles of OData.

Overview:
  This document defines terms to describe which data in a given entity model
  can be aggregated, and how.
  
-->
<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
  <edmx:Reference Uri="http://docs.oasis-open.org/odata/odata/v4.0/cs01/vocabularies/Org.OData.Core.V1.xml">
    <edmx:Include Namespace="Org.OData.Core.V1" Alias="Core" />
  </edmx:Reference>
  <edmx:DataServices>
    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="Org.OData.Aggregation.V1" Alias="Aggregation">
      <Annotation Term="Core.Description">
        <String>Terms to describe which data in a given entity model can be aggregated, and how.</String>
      </Annotation>

      <Term Name="SupportsApply" Type="Aggregation.SupportsApplyType" AppliesTo="EntitySet EntityContainer">
        <Annotation Term="Core.Description">
          <String>This entity set or entity container supports the $apply system query option</String>
        </Annotation>
      </Term>

      <ComplexType Name="SupportsApplyType">
        <Property Name="SupportsCount" DefaultValue="true" Type="Edm.Boolean">
          <Annotation Term="Core.Description" String="The virtual property $count can be used in the aggregate transformation" />
        </Property>
        <Property Name="SupportedTransformations" Type="Collection(Edm.String)">
          <Annotation Term="Core.Description" String="Transformations that can be used in $apply" />
        </Property>
        <Property Name="AggregatableProperties" Type="Collection(Aggregation.AggregatableProperty)">
          <Annotation Term="Core.Description" String="Properties that can be used in the aggregate transformation" />
        </Property>
        <!-- TODO: consider merging these with AggregatableProperties via an abstract base type -->
        <Property Name="DynamicAggregatableProperties" Type="Collection(Aggregation.DynamicAggregatableProperty)">
          <Annotation Term="Core.Description" String="Properties that can be used in the aggregate transformation" />
        </Property>
        <Property Name="GroupableProperties" Type="Collection(Aggregation.GroupableProperty)">
          <Annotation Term="Core.Description" String="Properties that can be used in the groupby transformation" />
        </Property>
        <Property Name="SupportsRollup" DefaultValue="MultipleHierarchies" Type="Aggregation.SupportsRollupType">
          <Annotation Term="Core.Description" String="The service supports rollup hierarchies in a groupby transformation" />
        </Property>
      </ComplexType>

      <EnumType Name="SupportsRollupType">
        <Annotation Term="Core.Description" String="The number of rollup operators allowed in a groupby transformation" />
        <Member Name="None" />
        <Member Name="SingleHierarchy" />
        <Member Name="MultipleHierarchies" />
      </EnumType>

      <ComplexType Name="AggregatableProperty">
        <Property Name="Name" Type="Edm.PropertyPath" />
        <Property Name="DefaultAggregationMethod" Type="Edm.String" Nullable="true">
          <Annotation Term="Core.Description" String="The default aggregation method for this property" />
        </Property>
        <Property Name="SupportedAggregationMethods" Type="Collection(Aggregation.SupportedAggregationMethod)">
          <Annotation Term="Core.Description" String="The supported aggregation methods for this property" />
        </Property>
      </ComplexType>

      <ComplexType Name="SupportedAggregationMethod">
        <Property Name="Name" Type="Edm.String" />
        <Property Name="RequiredGroupingProperties" Type="Collection(Edm.PropertyPath)">
          <Annotation Term="Core.Description" String="Properties that must be grouped by when aggregating this property" />
        </Property>
      </ComplexType>

      <!-- TODO: consider introducing abstract base type for this and the "Declared"AggregatableProperty -->
      <ComplexType Name="DynamicAggregatableProperty">
        <Property Name="Name" Type="Edm.String" />
        <Property Name="Type" Type="Edm.String" />
        <Property Name="SupportedGroupingProperties" Type="Collection(Edm.PropertyPath)">
          <Annotation Term="Core.Description" String="The aggregated value is defined for (a subset of) these grouping properties" />
        </Property>
      </ComplexType>

      <ComplexType Name="GroupableProperty">
        <Property Name="Name" Type="Edm.PropertyPath" />
        <Property Name="DependentProperties" Type="Collection(Edm.PropertyPath)">
          <Annotation Term="Core.Description"
            String="Properties that are functionally dependent on the groupable property and should not be used for grouping" />
        </Property>
      </ComplexType>

      <Term Name="LeveledHierarchy" Type="Collection(Edm.PropertyPath)" AppliesTo="EntityType">
        <Annotation Term="Core.Description"
          String="Defines a leveled hierarchy by defining an ordered list of properties in the hierarchy" />
      </Term>

      <Term Name="RecursiveHierarchy" Type="Aggregation.RecursiveHierarchyType" AppliesTo="EntityType">
        <Annotation Term="Core.Description" String="Defines a recursive hierarchy." />
      </Term>

      <ComplexType Name="RecursiveHierarchyType">
        <Property Name="NodeProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Property holding the hierarchy node value" />
        </Property>
        <Property Name="ParentNodeProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Property holding the value of the parent node" />
        </Property>
        <Property Name="HierarchyLevelProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Property holding the hierarchy level of the node" />
        </Property>
        <Property Name="IsLeafProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.RequiresType" String="Edm.Boolean" />
          <Annotation Term="Core.Description" String="Property indicating whether the node is a leaf of the hierarchy" />
        </Property>
      </ComplexType>

      <Function Name="isroot" IsBound="true">
        <Annotation Term="Core.Description"
          String="Returns true, if and only if the value of the node property of the specified hierarchy is the root of the hierarchy" />
        <Parameter Name="Entity" Type="Edm.EntityType" Nullable="false" />
        <Parameter Name="Hierarchy" Type="Edm.String" Nullable="false" />
        <ReturnType Type="Edm.Boolean" />
      </Function>

      <Function Name="isdescendant" IsBound="true">
        <Annotation Term="Core.Description"
          String="Returns true, if and only if the value of the node property of the specified hierarchy is a descendant of the given parent node with a distance of less than or equal to the optionally specified maximum distance" />
        <Parameter Name="Entity" Type="Edm.EntityType" Nullable="false" />
        <Parameter Name="Hierarchy" Type="Edm.String" Nullable="false" />
        <Parameter Name="Node" Type="Edm.PrimitiveType" Nullable="false" />
        <Parameter Name="MaxDistance" Type="Edm.Int16" />
        <ReturnType Type="Edm.Boolean" />
      </Function>

      <Function Name="isancestor" IsBound="true">
        <Annotation Term="Core.Description"
          String="Returns true, if and only if the value of the node property of the specified hierarchy is an ancestor of the given child node with a distance of less than or equal to the optionally specified maximum distance" />
        <Parameter Name="Entity" Type="Edm.EntityType" Nullable="false" />
        <Parameter Name="Hierarchy" Type="Edm.String" Nullable="false" />
        <Parameter Name="Node" Type="Edm.PrimitiveType" Nullable="false" />
        <Parameter Name="MaxDistance" Type="Edm.Int16" />
        <ReturnType Type="Edm.Boolean" />
      </Function>

      <Function Name="issibling" IsBound="true">
        <Annotation Term="Core.Description"
          String="Returns true, if and only if the value of the node property of the specified hierarchy has the same parent node as the specified node" />
        <Parameter Name="Entity" Type="Edm.EntityType" Nullable="false" />
        <Parameter Name="Hierarchy" Type="Edm.String" Nullable="false" />
        <Parameter Name="Node" Type="Edm.PrimitiveType" Nullable="false" />
        <ReturnType Type="Edm.Boolean" />
      </Function>

      <Function Name="isleaf" IsBound="true">
        <Annotation Term="Core.Description"
          String="Returns true, if and only if the value of the node property of the specified hierarchy has no descendants" />
        <Parameter Name="Entity" Type=" Edm.EntityType" Nullable="false" />
        <Parameter Name="Hierarchy" Type="Edm.String" Nullable="false" />
        <ReturnType Type="Edm.Boolean" />
      </Function>

      <Term Name="AvailableOnAggregates" Type="Aggregation.AvailableOnAggregatesType" AppliesTo="Action Function">
        <Annotation Term="Core.Description"
          String="This action or function is available on aggregated entities if the RequiredProperties are still defined" />
      </Term>

      <ComplexType Name="AvailableOnAggregatesType">
        <Property Name="RequiredProperties" Type="Collection(Edm.PropertyPath)" />
      </ComplexType>

    </Schema>
  </edmx:DataServices>
</edmx:Edmx>
