<?xml version="1.0" encoding="UTF-8"?>
<TestSuite MaxUncoveredRules="80" xmlns="http://docs.oasis-open.org/odata/ns/testcases">
  <DisableTrace Rule="odataIdentifier"/>
  <DisableTrace Rule="identifierLeadingCharacter"/>
  <DisableTrace Rule="identifierCharacter"/>
  <DisableTrace Rule="ALPHA"/>
  <DisableTrace Rule="DIGIT"/>
  
  <Constraint Rule="action">
    <Match>ActionName</Match>
    <Match>Activation</Match>
    <Match>Rejection</Match>
  </Constraint>
  <Constraint Rule="complexColProperty">
    <Match>Addresses</Match>
  </Constraint>
  <Constraint Rule="complexColFunction">
    <Match>MostPopularAddresses</Match>
  </Constraint>
  <Constraint Rule="complexFunction">
    <Match>MostPopularAddress</Match>
  </Constraint>
  <Constraint Rule="complexProperty">
    <Match>Address</Match>
  </Constraint>
  <Constraint Rule="complexTypeName">
    <Match>Address</Match>
    <Match>AddressWithLocation</Match>
  </Constraint>
  <Constraint Rule="customName">
    <Match>!deltatoken</Match>
    <Match>!special</Match>
    <Match>search</Match>
  </Constraint>
  <Constraint Rule="entityColFunction">
    <Match>AllOrders</Match>
    <Match>ProductsByColor</Match>
    <Match>ProductsByCategoryId</Match>
  </Constraint>
  <Constraint Rule="entityColNavigationProperty">
    <Match>Items</Match>
    <Match>Products</Match>
    <Match>Sales</Match>
  </Constraint>
  <Constraint Rule="entityContainer">
    <Match>Container</Match>
    <Match>Container2</Match>
  </Constraint>
  <Constraint Rule="entityColFunction">
    <Match>ProductsByComplex</Match>
    <Match>ProductsByCustomerRef</Match>
  </Constraint>
  <Constraint Rule="entityFunction">
    <Match>MostExpensive</Match>
    <Match>BestProduct</Match>
  </Constraint>
  <Constraint Rule="entityNavigationProperty">
    <Match>Category</Match>
    <Match>Currency</Match>
    <Match>Customer</Match>
    <Match>Product</Match>
    <Match>Supplier</Match>
  </Constraint>
  <Constraint Rule="entitySetName">
    <Match>Categories</Match>
    <Match>Customers</Match>
    <Match>LeaveRequests</Match>
    <Match>Orders</Match>
    <Match>OrderItems</Match>
    <Match>Products</Match>
    <Match>Suppliers</Match>
  </Constraint>
  <Constraint Rule="entityTypeName">
    <Match>Customer</Match>
    <Match>BestSellingProduct</Match>
    <Match>PreferredSupplier</Match>
    <Match>VipCustomer</Match>
  </Constraint>
  <Constraint Rule="enumerationMember">
    <Match>Solid</Match>
    <Match>Yellow</Match>
  </Constraint>
  <Constraint Rule="enumerationTypeName">
    <Match>NameKind</Match>
    <Match>Pattern</Match>
  </Constraint>
  <Constraint Rule="lambdaVariableExpr">
    <Match>lambda</Match>
  </Constraint>
  <Constraint Rule="namedEntity">
    <Match>BestProductEverCreated</Match>
    <Match>NamedEntity</Match>
  </Constraint>
  <Constraint Rule="namespacePart">
    <Match>Model</Match>
    <Match>Namespace</Match>
    <Match>Sales</Match>
  </Constraint>
  <Constraint Rule="primitiveColFunction">
    <Match>MostPopularNames</Match>
  </Constraint>
  <Constraint Rule="primitiveColProperty">
    <Match>EmailAddresses</Match>
    <Match>Names</Match>
    <Match>Sizes</Match>
  </Constraint>
  <Constraint Rule="primitiveFunction">
    <Match>Available</Match>
    <Match>MostPopularName</Match>
    <Match>PhoneticallySimilar</Match>
  </Constraint>
  <Constraint Rule="primitiveKeyProperty">
    <Match>Code</Match>
    <Match>ID</Match>
    <Match>ItemID</Match>
    <Match>OrderID</Match>
    <Match>Size</Match>
  </Constraint>
  <Constraint Rule="primitiveNonKeyProperty">
    <Match>AccountRepresentative</Match>
    <Match>Amount</Match>
    <Match>BirthDate</Match>
    <Match>City</Match>
    <Match>CompanyName</Match>
    <Match>Completed</Match>
    <Match>Country</Match>
    <Match>eyeColor</Match>
    <Match>LifeTime</Match>
    <Match>Line</Match>
    <Match>Location</Match>
    <Match>Name</Match>
    <Match>Price</Match>
    <Match>Quantity</Match>
    <Match>Rating</Match>
    <Match>ReleaseDate</Match>
    <Match>SalesArea</Match>
    <Match>Spokesperson</Match>
    <Match>Street</Match>
    <Match>style</Match>
  </Constraint>
  <Constraint Rule="streamProperty">
    <Match>Thumbnail</Match>
  </Constraint>
    
  <TestCase Name="URI with IPv4 address, path and trailing slash"
            Rule="odataUri">
    <Input>http://127.0.0.1:8080/MyService/</Input>
  </TestCase>
  <TestCase Name="URI with IPv6 address, path and trailing slash"
            Rule="odataUri">
    <Input>https://[2001:db8:85a3:8d3:1319:8a2e:370:7348]:8080/MyService/</Input>
  </TestCase>
  <TestCase Name="URI with IPvFuture address, path and trailing slash"
            Rule="odataUri">
    <Input>https://[v7.0]/MyService/</Input>
  </TestCase>
  <TestCase Name="URI without schema separator" 
            Rule="odataUri" 
            FailAt="4">
    <Input>http//My.Org/</Input>
  </TestCase>
  <TestCase Name="Binary with X" 
            Rule="binary">
    <Input>X'1a2B3c4D'</Input>
  </TestCase>
  <TestCase Name="Binary with binary" 
            Rule="binary">
    <Input>binary'1a2B3c4D'</Input>
  </TestCase>
  <TestCase Name="Binary with odd number of hex digits" 
            Rule="binary" 
            FailAt="5">
    <Input>X'123'</Input>
  </TestCase>
  <TestCase Name="Date in URL" 
            Rule="date">
    <Input>date'2012-09-03'</Input>
  </TestCase>
  <TestCase Name="Date in body" 
            Rule="dateBody">
    <Input>2012-09-03</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: no seconds" 
            Rule="dateTimeOffsetBody">
    <Input>2012-09-03T13:52Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: seconds" 
            Rule="dateTimeOffsetBody">
    <Input>2012-09-03T08:09:02Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: subseconds" 
            Rule="dateTimeOffsetBody">
    <Input>2012-08-31T18:19:22.1Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: earliest possible" 
            Rule="dateTimeOffsetBody">
    <Input>1753-01-01T00:00:00.000000000000Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: Midnight this day" 
            Rule="dateTimeOffsetBody"
            FailAt="12">
    <Input>2011-12-31T24:00Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: Midnight this day with seconds" 
            Rule="dateTimeOffsetBody"
            FailAt="12">
    <Input>2011-12-31T24:00:00Z</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset: CEST" 
            Rule="dateTimeOffsetBody">
    <Input>2012-09-03T14:53+02:00</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset in URL: UTC" 
            Rule="dateTimeOffset">
    <Input>datetimeoffset'2012-09-03T12:53Z'</Input>
  </TestCase>
  <TestCase Name="DateTimeOffset in URL: Midnight" 
            Rule="dateTimeOffset"
            FailAt="27">
    <Input>datetimeoffset'2012-09-03T24:00-03:00'</Input>
  </TestCase>
  <TestCase Name="Decimal" 
            Rule="decimalBody">
    <Input>3.14</Input>
  </TestCase>
  <TestCase Name="DayTimeDuration in body" 
            Rule="dayTimeDurationBody">
    <Input>P6DT23H59M59.9999S</Input>
  </TestCase>
  <TestCase Name="DayTimeDuration in body: no years allowed" 
            Rule="dayTimeDurationBody"
            FailAt="2">
    <Input>P1Y6DT23H59M59.9999S</Input>
  </TestCase>
  <TestCase Name="DayTimeDuration in body: no months allowed" 
            Rule="dayTimeDurationBody"
            FailAt="2">
    <Input>P1M6DT23H59M59.9999S</Input>
  </TestCase>
  <TestCase Name="DayTimeDuration in URL" 
            Rule="dayTimeDuration">
    <Input>daytimeduration'P6DT23H59M59.9999S'</Input>
  </TestCase>
  <TestCase Name="Decimal: integer" 
            Rule="decimalBody">
    <Input>-2</Input>
  </TestCase>
  <TestCase Name="Decimal: integer" 
            Rule="decimalBody"
            FailAt="4">
    <Input>+42.</Input>
  </TestCase>
  <TestCase Name="Decimal: no digit before decimal point" 
            Rule="decimalBody"
            FailAt="0">
    <Input>.1</Input>
  </TestCase>
  <TestCase Name="Decimal in URL" 
            Rule="decimal">
    <Input>3.14M</Input>
  </TestCase>
  <TestCase Name="Double" 
            Rule="doubleBody">
    <Input>3.14</Input>
  </TestCase>
  <TestCase Name="Double with exponent" 
            Rule="doubleBody">
    <Input>-0.314e1</Input>
  </TestCase>
  <TestCase Name="Negative infinity" 
            Rule="doubleBody">
    <Input>-INF</Input>
  </TestCase>
  <TestCase Name="Positive infinity" 
            Rule="doubleBody">
    <Input>INF</Input>
  </TestCase>
  <TestCase Name="Not a Number" 
            Rule="doubleBody">
    <Input>NaN</Input>
  </TestCase>
  <TestCase Name="Double in URL" 
            Rule="double">
    <Input>-0.314e1d</Input>
  </TestCase>
  <TestCase Name="Single in URL" 
            Rule="single">
    <Input>-0.314e1f</Input>
  </TestCase>
  <TestCase Name="Byte" 
            Rule="byte">
    <Input>255</Input>
  </TestCase>
  <TestCase Name="SByte" 
            Rule="sbyte">
    <Input>-128</Input>
  </TestCase>
  <TestCase Name="Int16" 
            Rule="int16">
    <Input>+32000</Input>
  </TestCase>
  <TestCase Name="Int32" 
            Rule="int32">
    <Input>-2000000000</Input>
  </TestCase>
  <TestCase Name="Int64" 
            Rule="int64">
    <Input>1234567890123456789</Input>
  </TestCase>
  <TestCase Name="Null: unqualified" 
            Rule="null">
    <Input>null</Input>
  </TestCase>
  <TestCase Name="Null: qualified" 
            Rule="null">
    <Input>null'Double'</Input>
  </TestCase>
  <TestCase Name="String" 
            Rule="string">
    <Input>'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&amp;('')*+,;=:@ ":{}[]'</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity Set" 
            Rule="resourcePath">
    <Input>Categories</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(11)</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(ID=1)</Input>
  </TestCase>
  <TestCase Name="Key"
            Rule="string">
    <Input>'Hugo''s%20Tavern'</Input>
  </TestCase>
  <TestCase Name="Resource Path - Entity" 
            Rule="resourcePath">
    <Input>Categories(ID=1,Size=5)</Input>
  </TestCase>
  <TestCase Name="Correct Guid" 
            Rule="GUID">
    <Input>guid'01234567-89ab-cdef-0123-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Guid with wrong character" 
            Rule="GUID"
            FailAt="10">
    <Input>guid'01234g67-89ab-cdef-0123-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Guid with less than 32 digits" 
            Rule="GUID"
            FailAt="28">
    <Input>guid'01234567-89ab-cdef-456789abcdef'</Input>
  </TestCase>
  <TestCase Name="Time: a year and a day" 
            Rule="TIME">
    <Input>time'P1Y1D'</Input>
  </TestCase>
  <TestCase Name="Time: plus a year and a day" 
            Rule="TIME">
    <Input>time'+P1Y1D'</Input>
  </TestCase>
  <TestCase Name="Time: a month before" 
            Rule="TIME">
    <Input>time'-P1M'</Input>
  </TestCase>
  <TestCase Name="Time: twelve seconds" 
            Rule="TIME">
    <Input>time'PT12S'</Input>
  </TestCase>
  <TestCase Name="Time: two hours, ten minutes and three point one seconds" 
            Rule="TIME">
    <Input>time'PT2H10M3.1S'</Input>
  </TestCase>
  <TestCase Name="Time: not time on the clock" 
            Rule="TIME"
            FailAt="5">
    <Input>time'11:22:33'</Input>
  </TestCase>
  <TestCase Name="Identifier" 
            Rule="odataIdentifier">
    <Input>TheQuickBrownFoxSays42</Input>
  </TestCase>
  <TestCase Name="Identifier with leading underscores" 
            Rule="odataIdentifier">
    <Input>__ID</Input>
  </TestCase>
  <TestCase Name="Identifier: no starting digit" 
            Rule="odataIdentifier" 
            FailAt="0">
    <Input>0time</Input>
  </TestCase>
  <TestCase Name="Identifier: no dots within" 
            Rule="odataIdentifier" 
            FailAt="2">
    <Input>No.Dot</Input>
  </TestCase>
  <TestCase Name="Entity Set" 
            Rule="resourcePath">
    <Input>Container.Products</Input>
  </TestCase>
  <!-- 
  	Test cases for example URLs in OData URI  
  	-->
  <TestCase Name="2 URL Components - service root URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/</Input>
  </TestCase>
  <TestCase Name="2 URL Components - service root directly at server root" 
            Rule="odataUri">
    <Input>http://My.Org:80/</Input>
  </TestCase>
  <TestCase Name="2 URL Components - resource path" 
            Rule="resourcePath">
    <Input>Categories(1)/Products</Input>
  </TestCase>
  <TestCase Name="2 URL Components - query options" 
            Rule="queryOptions">
    <Input>$top=2&amp;$orderby=Name</Input>
  </TestCase>
  <TestCase Name="2 URL Components - resource path and query options" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products?$top=2&amp;$orderby=Name</Input>
  </TestCase>
  <TestCase Name="4.1 - metadata URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/$metadata</Input>
  </TestCase>
  <TestCase Name="4.2 - batch URL" 
            Rule="odataUri">
    <Input>http://services.odata.org/OData/OData.svc/$batch</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - entity set" 
            Rule="entitySetName">
    <Input>Products</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - entity set" 
            Rule="odataRelativeUri">
    <Input>Products</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - entity set" 
            Rule="odataRelativeUri">
    <Input>Container.Products</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - no entity set after container" 
            Rule="odataRelativeUri"
            FailAt="10">
    <Input>Container.('foo')</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - no container before entity set" 
            Rule="odataRelativeUri"
            FailAt="0">
    <Input>.Products('foo')</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - function call" 
            Rule="odataRelativeUri">
    <Input>ProductsByCategoryId(categoryId=2)</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - function call with alias" 
            Rule="odataRelativeUri">
    <Input>ProductsByCategoryId(categoryId=@cat)?@cat=2</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - function call with alias" 
            Rule="odataRelativeUri">
    <Input>ProductsByCategoryId()?categoryId=2</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - service operation parameter" 
            Rule="parameterNameAndValue">
    <Input>color='red'</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - service operation call" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor()?color='red'</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - service operation call" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ProductsByColor()?color='red'</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (short)" 
            Rule="resourcePath">
    <Input>Categories(1)</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (short)" 
            Rule="odataRelativeUri">
    <Input>Customers(1)</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (long)" 
            Rule="resourcePath">
    <Input>Categories(ID=1)</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (wrong)" 
            Rule="resourcePath"
            FailAt="19">
    <Input>Categories(ID=wrong)</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (multi-part key)" 
            Rule="resourcePath">
    <Input>OrderItems(OrderID=1,ItemID='a')</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - single entity (wrong multi-part key)" 
            Rule="resourcePath"
            FailAt="20">
    <Input>OrderItems(OrderID=1;ItemID='a')</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - bound operation on entity set" 
            Rule="resourcePath">
    <Input>Products/MostExpensive()</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - follow navigation property" 
            Rule="resourcePath">
    <Input>Products(1)/Supplier</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - follow navigation property and call function" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products/AllOrders()</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - follow navigation property and call function" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products/MostExpensive()</Input>
  </TestCase>
  <TestCase Name="4.3 Addressing entities - named entities" 
            Rule="resourcePath">
    <Input>NamedEntity</Input>
  </TestCase>
  <TestCase Name="4.3.1 Canonical URL" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Products(1)</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing Links between Entities" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/$links/Products</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing Links between Entities - count" 
            Rule="odataRelativeUri"
            FailAt="29">
    <Input>Categories(1)/$links/Products/$count</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing Links between Entities" 
            Rule="odataRelativeUri"
            FailAt="29">
    <Input>Categories(1)/$links/Products(2)</Input>
  </TestCase>
  <TestCase Name="4.4 Addressing Links between Entities" 
            Rule="odataRelativeUri"
            FailAt="29">
    <Input>Categories(1)/$links/Products(2)/$count</Input>
  </TestCase>
  <TestCase Name="4.5.1 Call unbound action" 
            Rule="odataRelativeUri">
    <Input>Activation</Input>
  </TestCase>
  <TestCase Name="4.5.1 Call unbound action with container" 
            Rule="odataRelativeUri">
    <Input>Container.Activation()</Input>
  </TestCase>
  <TestCase Name="4.5.1 Call bound action" 
            Rule="odataRelativeUri">
    <Input>LeaveRequests(4)/Rejection</Input>
  </TestCase>
  <TestCase Name="4.5.1 Call bound action with container" 
            Rule="odataRelativeUri">
    <Input>LeaveRequests(4)/Container.Rejection()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound function" 
            Rule="odataRelativeUri">
    <Input>BestProduct()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound complex function" 
            Rule="odataRelativeUri">
    <Input>MostPopularAddress()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound complex collection function" 
            Rule="odataRelativeUri">
    <Input>MostPopularAddresses()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound primitive function" 
            Rule="odataRelativeUri">
    <Input>MostPopularName()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound primitive function" 
            Rule="odataRelativeUri">
    <Input>MostPopularName()/$value</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call unbound primitive collection function" 
            Rule="odataRelativeUri">
    <Input>MostPopularNames()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound complex function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularAddress()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound complex collection function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularAddresses()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound complex collection function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularAddresses()/$count</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound complex collection function - multiple" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularAddresses()/MostPopularNames()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound primitive function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound primitive function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularName()/$value</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound primitive collection function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularNames()</Input>
  </TestCase>
  <TestCase Name="4.5.2 Call bound primitive collection function" 
            Rule="odataRelativeUri">
    <Input>Customers/MostPopularNames()/$count</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - primitive" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ID</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - complex" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - complex path" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address/Street</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - complex path with type cast" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address/Model.AddressWithLocation/Location</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - stream" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Thumbnail</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - collection of primitive" 
            Rule="odataRelativeUri">
    <Input>Suppliers(1)/EmailAddresses</Input>
  </TestCase>
  <TestCase Name="4.6 Addressing a Property - collection of complex" 
            Rule="odataRelativeUri">
    <Input>Suppliers(1)/Addresses</Input>
  </TestCase>
  <TestCase Name="4.7 Addressing a Property Value" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/ID/$value</Input>
  </TestCase>
  <TestCase Name="4.7 Addressing a Property Value - illegal suffix" 
            Rule="odataRelativeUri"
            FailAt="23">
    <Input>Categories(1)/ID/$value/foo</Input>
  </TestCase>
  <TestCase Name="4.7 Addressing a Property Value - complex" 
            Rule="odataRelativeUri">
    <Input>Categories(1)/Address/Street/$value</Input>
  </TestCase>
  <TestCase Name="4.7 Addressing a Media Resource - not required by V4" 
            Rule="odataRelativeUri"
            FailAt="14">
    <Input>Categories(1)/$value</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing entities - entity set with $count" 
            Rule="odataRelativeUri">
    <Input>Products/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing entities - $count not last segment" 
            Rule="odataRelativeUri"
            FailAt="15">
    <Input>Products/$count/foo</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing entities - entity set navigation with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Items/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing entities - collection property with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Addresses/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing entities - collection property with $count" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Sizes/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - in $filter with navigation" 
            Rule="filter">
    <Input>$filter=Products/$count gt 0</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - in $filter with complex collection" 
            Rule="filter">
    <Input>$filter=Addresses/$count gt 0</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - in $filter with primitive collection" 
            Rule="filter">
    <Input>$filter=Sizes/$count gt 0</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - collection navigation property with $count in $orderby" 
            Rule="orderby">
    <Input>$orderby=Products/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - collection property with $count in $orderby" 
            Rule="orderby">
    <Input>$orderby=Addresses/$count</Input>
  </TestCase>
  <TestCase Name="4.8 Addressing the Count - collection property with $count in $orderby" 
            Rule="orderby">
    <Input>$orderby=Sizes/$count</Input>
  </TestCase>
  <TestCase Name="4.x Inheritance - set of subtypes" 
            Rule="odataRelativeUri">
    <Input>Products/Model.BestSellingProduct</Input>
  </TestCase>
  <TestCase Name="4.x Inheritance - set of subtypes, then key access" 
            Rule="odataRelativeUri">
    <Input>Products/Model.BestSellingProduct(1)</Input>
  </TestCase>
  <TestCase Name="4.x Inheritance - key access, then cast to subtype" 
            Rule="odataRelativeUri">
    <Input>Products(1)/Model.BestSellingProduct</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter" 
            Rule="filter">
    <Input>$filter=true</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter: no spaces" 
            Rule="filter"
            FailAt="7">
    <Input>$filter =true</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter: no spaces" 
            Rule="filter"
            FailAt="8">
    <Input>$filter= true</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter" 
            Rule="filter">
    <Input>$filter=Completed</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions" 
            Rule="firstMemberExpr">
    <Input>Product</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single navigation" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single-complex" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier/Address</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single-complex-primitive" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier/Address/Street</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - stream" 
            Rule="firstMemberExpr">
    <Input>Product/Thumbnail</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single-colComplex" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier/Addresses</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single-primitive" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier/CompanyName</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - single-colPrimitive" 
            Rule="firstMemberExpr">
    <Input>Product/Supplier/EmailAddresses</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - collection navigation" 
            Rule="firstMemberExpr">
    <Input>Supplier/Products</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - collection navigation" 
            Rule="firstMemberExpr">
    <Input>Products</Input>
  </TestCase>
  <TestCase Name="5.1.1 Filter - member expressions - collection navigation - count" 
            Rule="firstMemberExpr">
    <Input>Products/$count</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="boolCommonExpr">
    <Input>true eq false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Property" 
            Rule="firstMemberExpr">
    <Input>Size</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="boolCommonExpr">
    <Input>Size eq true</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Literal" 
            Rule="primitiveLiteral">
    <Input>4.0</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - Literal" 
            Rule="primitiveLiteral">
    <Input>'Huge'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="boolCommonExpr">
    <Input>Size eq 4.0</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="boolCommonExpr">
    <Input>Street eq 'Hugo'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - property path argument" 
            Rule="firstMemberExpr">
    <Input>Address/Street</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals - property path argument" 
            Rule="firstMemberExpr">
    <Input>Address/Model.AddressWithLocation/Location</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.1 Equals" 
            Rule="boolCommonExpr">
    <Input>Address/Street eq 'Hugo'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.2 Not Equals" 
            Rule="boolCommonExpr">
    <Input>Name ne 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.2 Not Equals" 
            Rule="boolCommonExpr">
    <Input>true ne false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.3 Greater Than" 
            Rule="boolCommonExpr">
    <Input>Name gt 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.4 Greater Than or Equal" 
            Rule="boolCommonExpr">
    <Input>Name ge 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.5 Less Than" 
            Rule="boolCommonExpr">
    <Input>Name lt 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.6 Less Than or Equal" 
            Rule="boolCommonExpr">
    <Input>Name le 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.7 Logical And" 
            Rule="boolCommonExpr">
    <Input>true and false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.8 Logical Or" 
            Rule="boolCommonExpr">
    <Input>true or false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.9 Logical Negation" 
            Rule="notExpr">
    <Input>not false</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Name eq 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Supplier/Name eq 'Milk'</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Name eq 'Milk' and Price lt 2.55M</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Name eq 'Milk' or Price lt 2.55M</Input>
  </TestCase>
  <TestCase Name="5.1.1.1.10 Logical Operator Examples" 
            Rule="boolCommonExpr">
    <Input>not endswith(Name,'ilk')</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.1 Addition" 
            Rule="commonExpr">
    <Input>Price add 2.45M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.1 Addition" 
            Rule="commonExpr">
    <Input>(Price add 2.45M) mod 2</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.2 Subtraction" 
            Rule="commonExpr">
    <Input>Price sub 0.55M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.3 Multiplication" 
            Rule="commonExpr">
    <Input>Price mul 2</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.4 Division" 
            Rule="commonExpr">
    <Input>Price div 2M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.5 Modulo" 
            Rule="commonExpr">
    <Input>Price mod 5</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.5 Negate" 
            Rule="commonExpr">
    <Input>-Price</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.6 Arithmetic Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Price add 2.45M eq 5.00M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.6 Arithmetic Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Price sub 0.55M eq 2.00M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.6 Arithmetic Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Price mul 2.0M eq 5.10M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.6 Arithmetic Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Price div 2.55M eq 1M</Input>
  </TestCase>
  <TestCase Name="5.1.1.2.6 Arithmetic Operator Examples" 
            Rule="boolCommonExpr">
    <Input>Rating mod 5 eq 0</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="commonExpr">
    <Input>(true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="boolCommonExpr">
    <Input>( true )</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="boolCommonExpr">
    <Input>(Name eq 'Milk')</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="boolCommonExpr">
    <Input>(false)</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="commonExpr">
    <Input>(4 add 5) mod (4 sub 1)</Input>
  </TestCase>
  <TestCase Name="5.1.1.3 Parenthesis" 
            Rule="boolcommonExpr">
    <Input>(4 add 5) mod (4 sub 1) eq 0</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.1 substringof" 
            Rule="boolCommonExpr">
    <Input>substringof('Alfreds',CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.2 endswith" 
            Rule="boolCommonExpr">
    <Input>endswith(CompanyName,'Futterkiste')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.3 startswith" 
            Rule="boolCommonExpr">
    <Input>startswith(CompanyName,'Futterkiste')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.3 startswith" 
            Rule="boolCommonExpr">
    <Input>startswith(Supplier/Name,'Futterkiste')</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.4 length" 
            Rule="boolCommonExpr">
    <Input>length(CompanyName) eq 19</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.5 indexof" 
            Rule="boolCommonExpr">
    <Input>indexof(CompanyName,'lfreds') eq 1</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.6 substring" 
            Rule="commonExpr">
    <Input>substring(CompanyName, 5)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.6 substring with length" 
            Rule="commonExpr">
    <Input>substring(CompanyName,5,2)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.7 tolower" 
            Rule="commonExpr">
    <Input>tolower(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.8 toupper" 
            Rule="commonExpr">
    <Input>toupper(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.9 trim" 
            Rule="commonExpr">
    <Input>trim(CompanyName)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.10 concat" 
            Rule="commonExpr">
    <Input>concat(CompanyName, Name)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.10 concat" 
            Rule="commonExpr">
    <Input>concat(concat(Street,'-'),City)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.11 year" 
            Rule="commonExpr">
    <Input>year(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.12 years" 
            Rule="commonExpr">
    <Input>years(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.13" 
            Rule="commonExpr">
    <Input>month(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.14" 
            Rule="commonExpr">
    <Input>months(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.15" 
            Rule="commonExpr">
    <Input>day(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.16" 
            Rule="commonExpr">
    <Input>days(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.17" 
            Rule="commonExpr">
    <Input>hour(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.18" 
            Rule="commonExpr">
    <Input>hours(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.19" 
            Rule="commonExpr">
    <Input>minute(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.20" 
            Rule="commonExpr">
    <Input>minutes(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.21" 
            Rule="commonExpr">
    <Input>second(BirthDate)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.22" 
            Rule="commonExpr">
    <Input>seconds(LifeTime)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.23" 
            Rule="commonExpr">
    <Input>round(Price)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.24" 
            Rule="commonExpr">
    <Input>floor(Price)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.25" 
            Rule="commonExpr">
    <Input>ceiling(Price)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.26 isof(1)"
            Rule="isofExpr">
    <Input>isof(Model.Customer)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.26 isof(2)" 
            Rule="isofExpr">
    <Input>isof(Category,Model.Customer)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.27 cast(1)"
            Rule="commonExpr">
    <Input>cast(Model.Customer)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.27 cast(2)" 
            Rule="commonExpr">
    <Input>cast(Category,Model.Customer)</Input>
  </TestCase>
  <TestCase Name="5.1.1.4.27 cast(2)" 
            Rule="commonExpr">
    <Input>cast(Category,Edm.Boolean)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="anyExpr">
    <Input>any()</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="anyExpr">
    <Input>any( )</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="anyExpr">
    <Input>any(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="anyExpr">
    <Input>any( lambda : true )</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="commonExpr">
    <Input>Products/any(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any() - requires a path prefix"
            Rule="boolCommonExpr"
            FailAt="3">
    <Input>any()</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="commonExpr">
    <Input>Supplier/Products/any(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="lambdaPredicatePrefixExpr">
    <Input>$it/</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="firstMemberExpr">
    <Input>$it/Completed</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="firstMemberExpr">
    <Input>lambda/Completed</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="commonExpr">
    <Input>Products/any(lambda:lambda/Completed)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x any()"
            Rule="commonExpr">
    <Input>Products/any(lambda:$it/Completed)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x lambdaPredicateExpr"
            Rule="boolCommonExpr">
    <Input>lambda/Name eq $it/Name</Input>
  </TestCase>
  <TestCase Name="5.1.1.x all()" 
            Rule="boolCommonExpr">
    <Input>Products/all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x all() - requires path prefix" 
            Rule="boolCommonExpr"
            FailAt="3">
    <Input>all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x all() - must contain a lambda expression" 
            Rule="boolCommonExpr"
            FailAt="13">
    <Input>Products/all()</Input>
  </TestCase>
  <TestCase Name="5.1.1.x all()" 
            Rule="commonExpr">
    <Input>Products/all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.1.x all()" 
            Rule="commonExpr">
    <Input>EmailAddresses/all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - single navigation property" 
            Rule="expand">
    <Input>$expand=Items</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - multiple navigation properties" 
            Rule="expand">
    <Input>$expand=Customer,Items</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - multiple navigation properties, nested" 
            Rule="expand">
    <Input>$expand=Customer,Items($expand=Product)</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - multiple nested options" 
            Rule="expand">
    <Input>$expand=Items($select=Quantity;$expand=Product($select=Name,Price))</Input>
  </TestCase>
  <TestCase Name="5.1.2 Expand - levels" 
            Rule="expand">
    <Input>$expand=Category($levels=4),Category($levels=max)</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - simple" 
            Rule="select">
    <Input>$select=Rating,ReleaseDate</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with star" 
            Rule="select">
    <Input>$select=*</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with property of complex property" 
            Rule="select">
    <Input>$select=Address/Street</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with cast and property of complex property" 
            Rule="select">
    <Input>$select=Address/Model.AddressWithLocation/Location</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - with expand" 
            Rule="queryOptions">
    <Input>$expand=Category($select=Name)</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - qualifiedEntityTypeName" 
            Rule="select">
    <Input>$select=Model.PreferredSupplier/Name</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - actions by container" 
            Rule="select">
    <Input>$select=Container.ActionName,Container.MostPopularName,Container2.*</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - actions and functions with signature" 
            Rule="select">
    <Input>$select=Container.ActionName(Model.PreferredSupplier),Container.MostPopularName(Edm.String,Edm.GeographyPoint,Model.NameKind)</Input>
  </TestCase>
  <TestCase Name="5.1.3 Select - tricky" 
            Rule="select">
    <Input>$select=Namespace.PreferredSupplier/AccountRepresentative,Address/Street</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy" 
            Rule="orderby">
    <Input>$orderby=Name</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy asc" 
            Rule="orderby">
    <Input>$orderby=Name&#09;asc</Input>
  </TestCase>
  <TestCase Name="5.1.4 OrderBy mixed" 
            Rule="orderby">
    <Input>$orderby=Name asc,Rating,Size desc</Input>
  </TestCase>
  <TestCase Name="5.1.5 Top and Skip" 
            Rule="queryOptions">
    <Input>$top=5&amp;$skip=10</Input>
  </TestCase>
  <TestCase Name="5.1.6 Inlinecount" 
            Rule="queryOptions">
    <Input>$inlinecount=allpages</Input>
  </TestCase>
  <TestCase Name="5.1.7 Format" 
            Rule="queryOptions">
    <Input>$format=json&amp;$format=atom&amp;$format=xml&amp;$format=text/html</Input>
  </TestCase>
  <TestCase Name="5.1.7 Format - media type" 
            Rule="queryOptions">
    <Input>$format=text/html</Input>
  </TestCase>
  <TestCase Name="Next Link" 
            Rule="queryOptions">
    <Input>$skiptoken=Start@Next_Chunk:From=Here!</Input>
  </TestCase>
  <TestCase Name="Next Link: no Ampersand" 
            Rule="queryOptions"
            FailAt="15">
    <Input>$skiptoken=Here?</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>search=blue</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>!deltatoken='201208210403'</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="customQueryOption">
      <Input>!special</Input>
  </TestCase>
  <TestCase Name="5.2 Custom Query Option" 
            Rule="queryOptions">
      <Input>$orderby=Name&amp;securitytoken=0412312321</Input>
  </TestCase>
  <TestCase Name="complex parameter value - no properties" 
            Rule="complexInUri">
    <Input>{}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - no properties" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex()?complex={}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - one property" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex()?complex={"Name":"Value"}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - one property" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex()?complex={"odata.type":"Model.Customer","Name":"Value"}</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - three properties" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex()?complex={"Name":false,"Price":3.14e0,"Rating":null}</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - zero" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor()?colors=[]</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - one" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor()?colors=["red"]</Input>
  </TestCase>
  <TestCase Name="function with collection of primitive - two" 
            Rule="odataRelativeUri">
    <Input>ProductsByColor()?colors=["red","green"]</Input>
  </TestCase>
  <TestCase Name="function with complex parameter - complex and collection properties" 
            Rule="odataRelativeUri">
    <Input>ProductsByComplex()?complex={"Names":["Fred","George"],"Address":{"Street":"MyWay"}}</Input>
  </TestCase>
  <TestCase Name="function with reference type parameter" 
            Rule="odataRelativeUri">
    <Input>ProductsByCustomerRef()?customer=KEY(Customers(1))</Input>
  </TestCase>
  <TestCase Name="function with reference type parameter - type cast" 
            Rule="odataRelativeUri">
    <Input>ProductsByCustomerRef()?customer=KEY(Customers(1)/Model.VipCustomer)</Input>
  </TestCase>
  <TestCase Name="function with reference type parameter - array" 
            Rule="odataRelativeUri">
    <Input>ProductsByCustomerRef()?customer=["KEY(Customers(1))"]</Input>
  </TestCase>
  <!-- Enumeration types -->
  <TestCase Name="Enumeration value in URI" 
            Rule="enum">
    <Input>Sales.Pattern'Yellow'</Input>
  </TestCase>
  <TestCase Name="Enumeration value in URI - multiple flag values" 
            Rule="enum">
    <Input>Sales.Pattern'Solid,Yellow'</Input>
  </TestCase>
  <TestCase Name="Enumeration value - in filter" 
            Rule="filter">
    <Input>$filter=style eq Sales.Pattern'Yellow'</Input>
  </TestCase>
  <TestCase Name="Enumeration value - in filter with has" 
            Rule="filter">
    <Input>$filter=style has Sales.Pattern'Yellow'</Input>
  </TestCase>
  <TestCase Name="Enumeration value - undefined value as numeric constant" 
            Rule="filter">
    <Input>$filter=style has Sales.Pattern'32'</Input>
  </TestCase>
  <TestCase Name="Enumeration value - undefined value as numeric constant" 
            Rule="odataRelativeUri">
    <Input>Products?$filter=style eq Sales.Pattern'Yellow,32'</Input>
  </TestCase>
  <TestCase Name="Enumeration value - undefined value as numeric constant" 
            Rule="odataRelativeUri">
    <Input>Products?$filter=style eq cast(eyeColor,Sales.Pattern)</Input>
  </TestCase>
  <!-- Geography and Geometry types -->
  <TestCase Name="GeographyCollection" 
            Rule="geographyCollection">
    <Input>geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'</Input>
  </TestCase>
  <TestCase Name="GeographyLineString" 
            Rule="geographyLineString">
    <Input>geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'</Input>
  </TestCase>
  <TestCase Name="GeographyMultiLineString" 
            Rule="geographyMultiLineString">
    <Input>geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'</Input>
  </TestCase>
  <TestCase Name="GeographyMultiPoint" 
            Rule="geographyMultiPoint">
    <Input>geography'SRID=0;MultiPoint()'</Input>
  </TestCase>
  <TestCase Name="GeographyMultiPoint" 
            Rule="geographyMultiPoint">
    <Input>geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'</Input>
  </TestCase>
  <TestCase Name="GeographyMultiPolygon" 
            Rule="geographyMultiPolygon">
    <Input>geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'</Input>
  </TestCase>
  <TestCase Name="GeographyPoint" 
            Rule="geographyPoint">
    <Input>geography'SRID=0;Point(142.1 64.1)'</Input>
  </TestCase>
  <TestCase Name="GeographyPolygon" 
            Rule="geographyPolygon">
    <Input>geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'</Input>
  </TestCase>
  <TestCase Name="GeometryCollection" 
            Rule="geometryCollection">
    <Input>geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'</Input>
  </TestCase>
  <TestCase Name="GeometryLineString" 
            Rule="geometryLineString">
    <Input>geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'</Input>
  </TestCase>
  <TestCase Name="GeometryMultiLineString" 
            Rule="geometryMultiLineString">
    <Input>geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'</Input>
  </TestCase>
  <TestCase Name="GeometryMultiPoint" 
            Rule="geometryMultiPoint">
    <Input>geometry'SRID=0;MultiPoint()'</Input>
  </TestCase>
  <TestCase Name="GeometryMultiPoint" 
            Rule="geometryMultiPoint">
    <Input>geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'</Input>
  </TestCase>
  <TestCase Name="GeometryMultiPolygon" 
            Rule="geometryMultiPolygon">
    <Input>geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'</Input>
  </TestCase>
  <TestCase Name="GeometryPoint" 
            Rule="geometryPoint">
    <Input>geometry'SRID=0;Point(142.1 64.1)'</Input>
  </TestCase>
  <TestCase Name="GeometryPolygon" 
            Rule="geometryPolygon">
    <Input>geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'</Input>
  </TestCase>
  <TestCase Name="geo.distance" 
            Rule="commonExpr">
    <Input>geo.distance(Supplier/Location,Product/Location)</Input>
  </TestCase>
  <TestCase Name="geo.intersects" 
            Rule="boolCommonExpr">
    <Input>geo.intersects(Supplier/SalesArea,Product/Location)</Input>
  </TestCase>
  <TestCase Name="geo.length" 
            Rule="commonExpr">
    <Input>geo.length(Line)</Input>
  </TestCase>
  <TestCase Name="geo.length" 
            Rule="commonExpr">
    <Input>geo.length(geography'SRID=0;LineString(142.1 64.1,3.14 2.78)')</Input>
  </TestCase>
  <TestCase Name="totalOffset" 
            Rule="commonExpr">
    <Input>gettotaloffsetminutes(ReleaseDate)</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr" 
            Rule="commonExpr">
    <Input>Available()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr" 
            Rule="commonExpr"
            FailAt="9">
    <Input>Available</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - directly call function" 
            Rule="commonExpr">
    <Input>MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - after collection navigation" 
            Rule="commonExpr">
    <Input>Products/Available()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - composed functions" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Name</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Model.BestSellingProduct/Name</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Name/Available()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Address</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Address/Street</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Addresses</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Addresses/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/EmailAddresses</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - stream property" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/Thumbnail</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation with any" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/EmailAddresses/any()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singleNavigation with all" 
            Rule="commonExpr">
    <Input>Products/BestProduct()/EmailAddresses/all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionNavigation" 
            Rule="commonExpr">
    <Input>Products/ProductsByColor(color='green')/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionNavigation" 
            Rule="commonExpr">
    <Input>Products/ProductsByColor(color='green')/Model.BestSellingProduct/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionNavigation with all" 
            Rule="commonExpr">
    <Input>Products/ProductsByColor()/all(lambda:true)</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - complexPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularAddress()/Street</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - complexPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularAddress()/Address</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - complexPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularAddress()/Address/Available()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularAddresses()/$count</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularAddresses()/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularNames()/$count</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collectionPath" 
            Rule="commonExpr">
    <Input>Items/MostPopularNames()/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - singlePath" 
            Rule="commonExpr">
    <Input>Items/MostPopularName()/MostPopularName()</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collection parameter in JSON" 
            Rule="commonExpr">
    <Input>Products/ProductsByColor(colors=["red","green","blue"])</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - collection parameter in JSON with whitespace" 
            Rule="commonExpr">
    <Input>Products/ProductsByColor(colors=[ "red", "green" , "blue" ])</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - complex JSON parameter" 
            Rule="commonExpr">
    <Input>Available(complex={"Name":"Value"})</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - complex JSON parameter with whitespace" 
            Rule="commonExpr">
    <Input>Available(complex={ "Name" : "Value" })</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - property as parameter" 
            Rule="commonExpr">
    <Input>PhoneticallySimilar(Word1=Name,Word2=Supplier/Name)</Input>
  </TestCase>
  <TestCase Name="Functions in commonExpr - property as parameter" 
            Rule="commonExpr">
    <Input>PhoneticallySimilar(Word1=Name,Word2=Supplier/Name)</Input>
  </TestCase>
  <TestCase Name="Action request body - compact" 
            Rule="actionRequestBody">
    <Input>{"quantity":2,"discountCode":"BLACKFRIDAY"}</Input>
  </TestCase>
  <TestCase Name="Action request body - with whitespace" 
            Rule="actionRequestBody">
    <Input>
{
   "quantity": 2,&#x0D;
   "discountCode": "BLACKFRIDAY",
   "customerRef" : "KEY(Customers(1))",
   "multiLineText" : "First \"line\",\nand second line!" 
}
    </Input>
  </TestCase>
  <!-- Aggregation -->
  <TestCase Name="Aggregation - basic" 
            Rule="queryOptions">
    <Input>$aggregate=Amount</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by" 
            Rule="queryOptions">
    <Input>$aggregate=Amount $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by path" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Customer/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by path with scoping" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Customer/(Name,ID)</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by path with scoping" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Customer/(Name,ID),Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by path with scoping" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Customer/Country,Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - group by path with scoping" 
            Rule="queryOptions">
    <Input>$aggregate=Amount $groupby Customer/Country,Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/Amount $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(Amount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(Amount,Quantity) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/Amount $groupby Name,Sales/Currency/Code</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path" 
            Rule="queryOptions">
    <Input>$aggregate=$groupby Country,Sales/Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with function" 
            Rule="queryOptions">
    <Input>$aggregate=sum(Amount) $groupby Customer/Country</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with function and alias" 
            Rule="queryOptions">
    <Input>$aggregate=average(Amount) as AverageAmount $groupby Customer/Country</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with function and alias" 
            Rule="queryOptions">
    <Input>$aggregate=Amount as TotalAmount $groupby Customer/Country</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with functions and aliases" 
            Rule="queryOptions">
    <Input>$aggregate=min(Amount) as MinAmount,max(Amount) as MaxAmount $groupby Customer/Country</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with functions and scoping" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(average(Amount) as AvgAmt) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with functions and scoping" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(sum(Amount),average(Amount) as AvgAmt,Amount as TotalAmount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with functions and scoping" 
            Rule="queryOptions">
    <Input>$aggregate=Product/Sales/(sum(Amount),average(Amount) as AvgAmt,Amount as TotalAmount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with multiple scopes" 
            Rule="queryOptions">
    <Input>$aggregate=Product/Sales/(sum(Amount),average(Amount) as AvgAmt,Amount as TotalAmount),Sales/(sum(Amount),average(Amount) as AvgAmt,Amount as TotalAmount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path and function" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(sum(Amount)) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path and function" 
            Rule="queryOptions">
    <Input>$aggregate=Product/Sales/(sum(Amount)) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path and function - simplified" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/sum(Amount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with path and function - simplified" 
            Rule="queryOptions">
    <Input>$aggregate=Product/Sales/sum(Amount) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - aggregate with functions and scoping" 
            Rule="queryOptions"
            FailAt="24">
    <Input>$aggregate=Sales/Amount as AggregateAmount</Input>
  </TestCase>
  <TestCase Name="Aggregation - count" 
            Rule="queryOptions">
    <Input>$aggregate=count() as SalesCount $groupby Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - count" 
            Rule="queryOptions">
    <Input>$aggregate=count(Sales) as SalesCount $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - count" 
            Rule="queryOptions">
    <Input>$aggregate=count(Name) as SalesCount $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - count" 
            Rule="queryOptions"
            FailAt="19">
    <Input>$aggregate=count() $groupby Product/Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - countDistinct" 
            Rule="queryOptions">
    <Input>$aggregate=Sales/(countDistinct(Product) as DistinctProducts) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - countDistinct" 
            Rule="queryOptions">
    <Input>$aggregate=countDistinct(Name) as NameCount</Input>
  </TestCase>
  <TestCase Name="Aggregation - countDistinct" 
            Rule="queryOptions"
            FailAt="40">
    <Input>$aggregate=Sales/(countDistinct(Product)) $groupby Name</Input>
  </TestCase>
  <TestCase Name="Aggregation - countDistinct" 
            Rule="queryOptions"
            FailAt="30">
    <Input>$aggregate=countDistinct(Name)</Input>
  </TestCase>
  <TestCase Name="Aggregation - countDistinct" 
            Rule="queryOptions"
            FailAt="25">
    <Input>$aggregate=countDistinct()</Input>
  </TestCase>
</TestSuite>